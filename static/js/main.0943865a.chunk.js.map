{"version":3,"sources":["Components/TodoInput.js","Components/TodoItem.js","Components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","handleChange","item","handleSubmit","editItem","className","type","placeholder","onChange","value","onClick","TodoItem","title","handleDelete","handleEdit","completed","handleComplete","style","color","TodoList","clearItems","items","marginBottom","map","key","id","App","useState","setItems","setItem","uuid","setId","setEditItem","complete","setComplete","useEffect","localItems","JSON","parse","localStorage","getItem","stringify","e","target","alert","newItem","newArray","filteredItems","filter","c","filterItem","find","index","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0943865a.chunk.js","sourcesContent":["import React  from 'react'\r\nimport './Style.css'\r\nconst TodoInput = ({handleChange, item , handleSubmit, editItem}) =>{\r\n\r\n\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                     <input\r\n                     type=\"text\" \r\n                     className=\"txt\"\r\n                     placeholder=\"Enter some text .......\"\r\n                     onChange={handleChange}\r\n                     value={item}\r\n                     />\r\n                     <button \r\n                        className={editItem? \"btn-green\" : \"btn\"}\r\n                        onClick={handleSubmit} \r\n                     >{editItem ? \"Edit Todo\" : \"Add Todo\"}</button>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\nexport default TodoInput","import React from 'react'\r\n\r\nconst TodoItem = ({ title, handleDelete, handleEdit, completed, handleComplete }) =>{\r\n\r\n        return(\r\n            <li className=\"list-item\">\r\n                <div className=\"row li-row\">\r\n                    <span className={completed ? \"true\" : \"false\"}>{title}</span>\r\n                    <div className=\"actin-btn\">\r\n                        <i className=\"fa fa-pencil\"\r\n                           style={{color:\"orange\"}}\r\n                           onClick={completed ? null : handleEdit}\r\n                        ></i>\r\n                        <i className=\"fa fa-trash\" \r\n                           style={{color:\"red\"}}\r\n                           onClick={completed ? null : handleDelete}    \r\n                        ></i>\r\n                        <i className=\"fa fa-check\"\r\n                           style={{color:\"green\"}}\r\n                           onClick={completed ? null : handleComplete}\r\n                        ></i>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        )\r\n}\r\nexport default TodoItem","import React  from 'react'\r\nimport TodoItem from './TodoItem'\r\nconst TodoList = ({ clearItems, items, handleDelete, handleEdit, handleComplete }) =>{\r\n\r\n        return(\r\n            <div className=\"container lc\">\r\n                <h1 \r\n                className=\"title\"\r\n                style={{marginBottom:'30px'}}\r\n                >Todo List</h1>\r\n                   <div className=\"row list-row\">\r\n                        <ul className=\"list\">\r\n                           {items.map(item => <TodoItem\r\n                            title = {item.title}\r\n                            key = {item.id}\r\n                            handleDelete = {()=>handleDelete(item.id)}\r\n                            handleEdit = {()=>handleEdit(item.id)}\r\n                            handleComplete = {()=>handleComplete(item)}\r\n                            completed = {item.completed}\r\n                           />)}\r\n                            <button \r\n                                className=\"btn lbtn\"\r\n                                onClick={ clearItems }\r\n                            >Clear List</button>\r\n                        </ul>\r\n                    </div>\r\n            </div>\r\n        )\r\n}\r\nexport default TodoList","import React , {useState , useEffect} from 'react';\nimport TodoInput from './Components/TodoInput'\nimport TodoList from './Components/TodoList'\nimport uuid from 'uuid'\nimport './Components/Style.css'\n\nconst App = ()=>{\n\n  const [items, setItems] = useState([])\n  const [item, setItem] = useState('')\n  const [id, setId] = useState(uuid())\n  const [editItem, setEditItem] = useState(false)\n  const [complete, setComplete] = useState(false)\n\n  useEffect(() => {\n    const localItems = (JSON.parse(localStorage.getItem('TodoItems')))\n    if(localItems){\n      setItems(localItems)\n    }else{\n      setItems([])\n    }\n  }, [])\n  useEffect(() => {\n    localStorage.setItem('TodoItems', JSON.stringify(items))\n  }, [items])\n\n  const handleChange = e =>{\n    setItem(e.target.value)\n  }\n  const handleSubmit = () =>{\n    if(item === ''){\n      alert(\"Can't enter empty value...\")\n    }else{\n      const newItem = {\n        title:item, \n        id:id,\n        completed:complete\n      }\n      const newArray = [...items, newItem]\n      setItems(newArray)\n      setItem('')\n      setId(uuid())\n      setEditItem(false)\n      setComplete(false)\n\n      localStorage.setItem('TodoItems',JSON.stringify(items))\n    }  \n  }\n  const clearItems = () =>{\n    setItems([])\n  }\n  const handleDelete = id =>{\n    const filteredItems = items.filter(c=>c.id !== id)\n    setItems(filteredItems)\n  }\n  const handleEdit = id => {\n    const filteredItems = items.filter(c=>c.id !== id)\n    const filterItem = items.find(c=> c.id === id)\n    setItems(filteredItems)\n    setItem(filterItem.title)\n    setEditItem(true)\n    setId(id)\n    setComplete(false)\n  }\n  const handleComplete = item =>{\n    const newArray = [...items]\n    const index = items.indexOf(item)\n    newArray[index] = items[index]\n    newArray[index].completed = true\n    setItems(newArray)\n  }\n\n    return(\n      <div className=\"main-container\">\n        <h1 className=\"title\">Todo Input</h1>\n        <TodoInput\n          handleChange = {handleChange}\n          item = {item}\n          editItem = {editItem}\n          handleSubmit = {handleSubmit}\n        />\n        <TodoList\n           clearItems = {clearItems}\n           items = {items}\n           handleDelete = {handleDelete}\n           handleEdit = {handleEdit}\n           handleComplete = {handleComplete}\n        />\n      </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}